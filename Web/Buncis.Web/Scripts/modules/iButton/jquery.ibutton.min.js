(function (c) {
    c.iButton = { version: "1.0.03", setDefaults: function (m) { c.extend(n, m) } }; c.fn.iButton = function (m) {
        var a = "string" == typeof arguments[0] && arguments[0], h = a && Array.prototype.slice.call(arguments, 1) || arguments, b = 0 == this.length ? null : c.data(this[0], "iButton"); if (b && a && this.length) { if ("object" == a.toLowerCase()) return b; if (b[a]) { var f; this.each(function (l) { var d = c.data(this, "iButton")[a].apply(b, h); if (0 == l && d) if (d.jquery) f = c([]).add(d); else return f = d, !1; else d && d.jquery && (f = f.add(d)) }); return f || this } return this } return this.each(function () {
            new A(this,
m)
        })
    }; var B = 0; c.browser.iphone = -1 < navigator.userAgent.toLowerCase().indexOf("iphone"); var A = function (m, a) {
        var h = this, b = c(m), f = ++B, l = !1, d, u, k, v = !1, o = null, x = null, p = null, y = null, a = c.extend({}, n, a, c.metadata ? b.metadata() : {}); k = a.labelOn == C && a.labelOff == D; if (b.is(":checkbox, :radio")) { if (c.data(b[0], "iButton")) return } else return b.find(":checkbox, :radio").iButton(a); c.data(b[0], "iButton", h); "auto" == a.resizeHandle && (a.resizeHandle = !k); "auto" == a.resizeContainer && (a.resizeContainer = !k); this.toggle = function (a) {
            b.attr("checked",
arguments.length > 0 ? a : !b[0].checked).trigger("change")
        }; this.disable = function (e) { var d = arguments.length > 0 ? e : !l; l = d; b.attr("disabled", d); g[d ? "addClass" : "removeClass"](a.classDisabled); c.isFunction(a.disable) && a.disable.apply(h, [l, b, a]) }; this.repaint = function () { q() }; this.destroy = function () { c([b[0], g[0]]).unbind(".iButton"); c(document).unbind(".iButton_" + f); g.after(b).remove(); c.data(b[0], "iButton", null); c.isFunction(a.destroy) && a.destroy.apply(h, [b, a]) }; b.wrap('<div class="' + c.trim(a.classContainer +
" " + a.className) + '" />').after('<div class="' + a.classHandle + '"><div class="' + a.classHandleRight + '"><div class="' + a.classHandleMiddle + '" /></div></div><div class="' + a.classLabelOff + '"><span><label>' + a.labelOff + '</label></span></div><div class="' + a.classLabelOn + '"><span><label>' + a.labelOn + '</label></span></div><div class="' + a.classPaddingLeft + '"></div><div class="' + a.classPaddingRight + '"></div>'); var g = b.parent(), i = b.siblings("." + a.classHandle), z = b.siblings("." + a.classLabelOff), r = z.children("span"),
s = b.siblings("." + a.classLabelOn), t = s.children("span"); if (a.resizeHandle || a.resizeContainer) d = t.outerWidth(), u = r.outerWidth(); a.resizeHandle ? (k = Math.min(d, u), i.css("width", k)) : k = i.width(); a.resizeContainer ? (d = Math.max(d, u) + k + 20, g.css("width", d), z.css("width", d - 5)) : d = g.width(); var j = d - k - 6, q = function (e) {
    var c = b[0].checked ? j : 0; if ((e = arguments.length > 0 ? arguments[0] : true) && a.enableFx) {
        i.stop().animate({ left: c }, a.duration, a.easing); s.stop().animate({ width: c + 4 }, a.duration, a.easing); t.stop().animate({ marginLeft: c -
j
        }, a.duration, a.easing); r.stop().animate({ marginRight: -c }, a.duration, a.easing)
    } else { i.css("left", c); s.css("width", c + 4); t.css("marginLeft", c - j); r.css("marginRight", -c) } 
}; q(!1); var w = function (a) { return a.pageX || (a.originalEvent.changedTouches ? a.originalEvent.changedTouches[0].pageX : 0) }; g.bind("mousedown.iButton touchstart.iButton", function (e) {
    if (!c(e.target).is(":checkbox, :radio") && !(l || !a.allowRadioUncheck && b.is(":radio:checked"))) {
        e.preventDefault(); o = i; x = w(e); p = x - (parseInt(i.css("left"), 10) || 0);
        y = (new Date).getTime(); return false
    } 
}); a.enableDrag && c(document).bind("mousemove.iButton_" + f + " touchmove.iButton_" + f, function (b) { if (o == i) { b.preventDefault(); b = w(b); if (b != p) { v = true; g.addClass(a.classHandleActive) } b = Math.min(1, Math.max(0, (b - p) / j)); i.css("left", b * j); s.css("width", b * j + 4); r.css("marginRight", -b * j); t.css("marginLeft", -(1 - b) * j); return false } }); c(document).bind("mouseup.iButton_" + f + " touchend.iButton_" + f, function (e) {
    if (o != i) return false; e.preventDefault(); var d = true; if (!v || (new Date).getTime() -
y < a.clickOffset) { e = b[0].checked; b.attr("checked", !e); c.isFunction(a.click) && a.click.apply(h, [!e, b, a]) } else { e = (w(e) - p) / j >= 0.5; b[0].checked == e && (d = false); b.attr("checked", e) } g.removeClass(a.classHandleActive); v = o = null; d ? b.trigger("change") : q(); return false
}); b.bind("change.iButton", function () { q(); if (b.is(":radio")) { var d = b[0]; c(d.form ? d.form[d.name] : ":radio[name=" + d.name + "]").filter(":not(:checked)").iButton("repaint") } c.isFunction(a.change) && a.change.apply(h, [b, a]) }).bind("focus.iButton", function () { g.addClass(a.classFocus) }).bind("blur.iButton",
function () { g.removeClass(a.classFocus) }); c.isFunction(a.click) && b.bind("click.iButton", function () { a.click.apply(h, [b[0].checked, b, a]) }); b.is(":disabled") && this.disable(!0); c.browser.msie && (g.find("*").andSelf().attr("unselectable", "on"), b.bind("click.iButton", function () { b.triggerHandler("change.iButton") })); c.isFunction(a.init) && a.init.apply(h, [b, a])
    }, n = { duration: 200, easing: "swing", labelOn: "YES", labelOff: "NO", resizeHandle: "auto", resizeContainer: "auto", enableDrag: !0, enableFx: !0, allowRadioUncheck: !1,
        clickOffset: 120, className: "", classContainer: "ibutton-container", classDisabled: "ibutton-disabled", classFocus: "ibutton-focus", classLabelOn: "ibutton-label-on", classLabelOff: "ibutton-label-off", classHandle: "ibutton-handle", classHandleMiddle: "ibutton-handle-middle", classHandleRight: "ibutton-handle-right", classHandleActive: "ibutton-active-handle", classPaddingLeft: "ibutton-padding-left", classPaddingRight: "ibutton-padding-right", init: null, change: null, click: null, disable: null, destroy: null
    }, C = n.labelOn, D = n.labelOff
})(jQuery);