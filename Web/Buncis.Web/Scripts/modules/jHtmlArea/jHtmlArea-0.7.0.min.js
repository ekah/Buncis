(function (c) { c.fn.htmlarea = function (g) { if (g && typeof (g) === "string") { var d = []; for (var e = 1; e < arguments.length; e++) { d.push(arguments[e]) } var j = a(this[0]); var h = j[g]; if (h) { return h.apply(j, d) } } return this.each(function () { a(this, g) }) }; var a = window.jHtmlArea = function (e, d) { if (e.jquery) { return a(e[0]) } if (e.jhtmlareaObject) { return e.jhtmlareaObject } else { return new a.fn.init(e, d) } }; a.fn = a.prototype = { jhtmlarea: "0.7.0", init: function (g, l) { if (g.nodeName.toLowerCase() === "textarea") { var d = c.extend({}, a.defaultOptions, l); g.jhtmlareaObject = this; var k = this.textarea = c(g); var f = this.container = c("<div/>").addClass("jHtmlArea").width(k.width()).insertAfter(k); var j = this.toolbar = c("<div/>").addClass("ToolBar").appendTo(f); b.initToolBar.call(this, d); var i = this.iframe = c("<iframe/>").height(k.height()); i.width(k.width() - (c.browser.msie ? 0 : 4)); var h = this.htmlarea = c("<div/>").append(i); f.append(h).append(k.hide()); b.initEditor.call(this, d); b.attachEditorEvents.call(this); i.height(i.height() - j.height()); j.width(k.width() - 2); var e = document.createElement("link"); e.href = "/styles/bunIFrame.css"; e.rel = "stylesheet"; e.type = "text/css"; i.contents().find("body").get(0).appendChild(e); if (d.loaded) { d.loaded.call(this) } } }, dispose: function () { this.textarea.show().insertAfter(this.container); this.container.remove(); this.textarea[0].jhtmlareaObject = null }, execCommand: function (e, d, f) { this.iframe[0].contentWindow.focus(); this.editor.execCommand(e, d || false, f || null); this.updateTextArea() }, ec: function (e, d, f) { this.execCommand(e, d, f) }, queryCommandValue: function (d) { this.iframe[0].contentWindow.focus(); return this.editor.queryCommandValue(d) }, qc: function (d) { return this.queryCommandValue(d) }, getSelectedHTML: function () { if (c.browser.msie) { return this.getRange().htmlText } else { var d = this.getRange().cloneContents(); return c("<p/>").append(c(d)).html() } }, getSelection: function () { if (c.browser.msie) { return this.editor.selection } else { return this.iframe[0].contentDocument.defaultView.getSelection() } }, getRange: function () { var d = this.getSelection(); if (!d) { return null } return (d.getRangeAt) ? d.getRangeAt(0) : d.createRange() }, html: function (d) { if (d) { this.pastHTML(d) } else { return toHtmlString() } }, pasteHTML: function (d) { this.iframe[0].contentWindow.focus(); var e = this.getRange(); if (c.browser.msie) { e.pasteHTML(d) } else { if (c.browser.mozilla) { e.deleteContents(); e.insertNode(c((d.indexOf("<") != 0) ? c("<span/>").append(d) : d)[0]) } else { e.deleteContents(); e.insertNode(c(this.iframe[0].contentWindow.document.createElement("span")).append(c((d.indexOf("<") != 0) ? "<span>" + d + "</span>" : d))[0]) } } e.collapse(false); e.select() }, cut: function () { this.ec("cut") }, copy: function () { this.ec("copy") }, paste: function () { this.ec("paste") }, bold: function () { this.ec("bold") }, italic: function () { this.ec("italic") }, underline: function () { this.ec("underline") }, strikeThrough: function () { this.ec("strikethrough") }, image: function (d) { if (c.browser.msie && !d) { this.ec("insertImage", true) } else { this.ec("insertImage", false, (d || prompt("Image URL:", "http://"))) } }, removeFormat: function () { this.ec("removeFormat", false, []); this.unlink() }, link: function () { if (c.browser.msie) { this.ec("createLink", true) } else { this.ec("createLink", false, prompt("Link URL:", "http://")) } }, unlink: function () { this.ec("unlink", false, []) }, orderedList: function () { this.ec("insertorderedlist") }, unorderedList: function () { this.ec("insertunorderedlist") }, superscript: function () { this.ec("superscript") }, subscript: function () { this.ec("subscript") }, p: function () { this.formatBlock("<p>") }, h1: function () { this.heading(1) }, h2: function () { this.heading(2) }, h3: function () { this.heading(3) }, h4: function () { this.heading(4) }, h5: function () { this.heading(5) }, h6: function () { this.heading(6) }, heading: function (d) { this.formatBlock(c.browser.msie ? "Heading " + d : "h" + d) }, indent: function () { this.ec("indent") }, outdent: function () { this.ec("outdent") }, insertHorizontalRule: function () { this.ec("insertHorizontalRule", false, "ht") }, justifyLeft: function () { this.ec("justifyLeft") }, justifyCenter: function () { this.ec("justifyCenter") }, justifyRight: function () { this.ec("justifyRight") }, increaseFontSize: function () { if (c.browser.msie) { this.ec("fontSize", false, this.qc("fontSize") + 1) } else { if (c.browser.safari) { this.getRange().surroundContents(c(this.iframe[0].contentWindow.document.createElement("span")).css("font-size", "larger")[0]) } else { this.ec("increaseFontSize", false, "big") } } }, decreaseFontSize: function () { if (c.browser.msie) { this.ec("fontSize", false, this.qc("fontSize") - 1) } else { if (c.browser.safari) { this.getRange().surroundContents(c(this.iframe[0].contentWindow.document.createElement("span")).css("font-size", "smaller")[0]) } else { this.ec("decreaseFontSize", false, "small") } } }, forecolor: function (d) { this.ec("foreColor", false, d || prompt("Enter HTML Color:", "#")) }, formatBlock: function (d) { this.ec("formatblock", false, d || null) }, showHTMLView: function () { this.updateTextArea(); this.textarea.show(); this.htmlarea.hide(); c("ul li:not(li:has(a.html))", this.toolbar).hide(); c("ul:not(:has(:visible))", this.toolbar).hide(); c("ul li a.html", this.toolbar).addClass("highlighted") }, hideHTMLView: function () { this.updateHtmlArea(); this.textarea.hide(); this.htmlarea.show(); c("ul", this.toolbar).show(); c("ul li", this.toolbar).show().find("a.html").removeClass("highlighted") }, toggleHTMLView: function () { (this.textarea.is(":hidden")) ? this.showHTMLView() : this.hideHTMLView() }, toHtmlString: function () { return this.editor.body.innerHTML }, toString: function () { return this.editor.body.innerText }, updateTextArea: function () { this.textarea.val(this.toHtmlString()) }, updateHtmlArea: function () { this.editor.body.innerHTML = this.textarea.val() } }; a.fn.init.prototype = a.fn; a.defaultOptions = { toolbar: [["html"], ["bold", "italic", "underline", "strikethrough", "|", "subscript", "superscript"], ["increasefontsize", "decreasefontsize"], ["orderedlist", "unorderedlist"], ["indent", "outdent"], ["justifyleft", "justifycenter", "justifyright"], ["link", "unlink", "image", "horizontalrule"], ["p", "h1", "h2", "h3", "h4", "h5", "h6"], ["cut", "copy", "paste"]], css: null, toolbarText: { bold: "Bold", italic: "Italic", underline: "Underline", strikethrough: "Strike-Through", cut: "Cut", copy: "Copy", paste: "Paste", h1: "Heading 1", h2: "Heading 2", h3: "Heading 3", h4: "Heading 4", h5: "Heading 5", h6: "Heading 6", p: "Paragraph", indent: "Indent", outdent: "Outdent", horizontalrule: "Insert Horizontal Rule", justifyleft: "Left Justify", justifycenter: "Center Justify", justifyright: "Right Justify", increasefontsize: "Increase Font Size", decreasefontsize: "Decrease Font Size", forecolor: "Text Color", link: "Insert Link", unlink: "Remove Link", image: "Insert Image", orderedlist: "Insert Ordered List", unorderedlist: "Insert Unordered List", subscript: "Subscript", superscript: "Superscript", html: "Show/Hide HTML Source View"} }; var b = { toolbarButtons: { strikethrough: "strikeThrough", orderedlist: "orderedList", unorderedlist: "unorderedList", horizontalrule: "insertHorizontalRule", justifyleft: "justifyLeft", justifycenter: "justifyCenter", justifyright: "justifyRight", increasefontsize: "increaseFontSize", decreasefontsize: "decreaseFontSize", html: function (d) { this.toggleHTMLView() } }, initEditor: function (d) { var f = this.editor = this.iframe[0].contentWindow.document; f.designMode = "on"; f.open(); f.write(this.textarea.val()); f.close(); if (d.css) { var g = f.createElement("link"); g.rel = "stylesheet"; g.type = "text/css"; g.href = d.css; f.getElementsByTagName("head")[0].appendChild(g) } }, initToolBar: function (d) { var g = this; var f = function (j, i, k) { return c("<li/>").append(c("<a href='javascript:void(0);'/>").addClass(j).attr("title", i).click(function () { k.call(g, c(this)) })) }; function h(j) { var m = c("<ul/>").appendTo(g.toolbar); for (var l = 0; l < j.length; l++) { var o = j[l]; if ((typeof (o)).toLowerCase() === "string") { if (o === "|") { m.append(c('<li class="separator"/>')) } else { var n = (function (p) { var i = b.toolbarButtons[p] || p; if ((typeof (i)).toLowerCase() === "function") { return function (q) { i.call(this, q) } } else { return function () { this[i](); this.editor.body.focus() } } })(o.toLowerCase()); var k = d.toolbarText[o.toLowerCase()]; m.append(f(o.toLowerCase(), k || o, n)) } } else { m.append(f(o.css, o.text, o.action)) } } } if (d.toolbar.length !== 0 && b.isArray(d.toolbar[0])) { for (var e = 0; e < d.toolbar.length; e++) { h(d.toolbar[e]) } } else { h(d.toolbar) } }, attachEditorEvents: function () { var e = this; var d = function () { e.updateHtmlArea() }; this.textarea.click(d).keyup(d).keydown(d).mousedown(d).blur(d); var f = function () { e.updateTextArea() }; c(this.editor.body).click(f).keyup(f).keydown(f).mousedown(f).blur(f); c("form").submit(function () { e.toggleHTMLView(); e.toggleHTMLView() }); if (window.__doPostBack) { var g = __doPostBack; window.__doPostBack = function () { if (e) { if (e.toggleHTMLView) { e.toggleHTMLView(); e.toggleHTMLView() } } return g.apply(window, arguments) } } }, isArray: function (d) { return d && typeof d === "object" && typeof d.length === "number" && typeof d.splice === "function" && !(d.propertyIsEnumerable("length")) } } })(jQuery);