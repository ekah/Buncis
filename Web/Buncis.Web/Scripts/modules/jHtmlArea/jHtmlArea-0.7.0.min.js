(function (b) {
    b.fn.htmlarea = function (a) { if (a && "string" === typeof a) { for (var c = [], b = 1; b < arguments.length; b++) c.push(arguments[b]); var b = d(this[0]), e = b[a]; if (e) return e.apply(b, c) } return this.each(function () { d(this, a) }) }; var d = window.jHtmlArea = function (a, b) { return a.jquery ? d(a[0]) : a.jhtmlareaObject ? a.jhtmlareaObject : new d.fn.init(a, b) }; d.fn = d.prototype = { jhtmlarea: "0.7.0", init: function (a, c) {
        if ("textarea" === a.nodeName.toLowerCase()) {
            var f = b.extend({}, d.defaultOptions, c); a.jhtmlareaObject = this; var e = this.textarea =
b(a), k = this.container = b("<div/>").addClass("jHtmlArea").width(e.width()).insertAfter(e), l = this.toolbar = b("<div/>").addClass("ToolBar").appendTo(k); h.initToolBar.call(this, f); var i = this.iframe = b("<iframe/>").height(e.height()); i.width(e.width() - (b.browser.msie ? 0 : 4)); var j = this.htmlarea = b("<div/>").append(i); k.append(j).append(e.hide()); h.initEditor.call(this, f); h.attachEditorEvents.call(this); i.height(i.height() - l.height()); l.width(e.width() - 2); e = document.createElement("link"); e.href = "/styles/bun_xiframe.css";
            e.rel = "stylesheet"; e.type = "text/css"; i.contents().find("head").get(0).appendChild(e); f.loaded && f.loaded.call(this)
        } 
    }, dispose: function () { this.textarea.show().insertAfter(this.container); this.container.remove(); this.textarea[0].jhtmlareaObject = null }, execCommand: function (a, b, f) { this.iframe[0].contentWindow.focus(); this.editor.execCommand(a, b || !1, f || null); this.updateTextArea() }, ec: function (a, b, f) { this.execCommand(a, b, f) }, queryCommandValue: function (a) { this.iframe[0].contentWindow.focus(); return this.editor.queryCommandValue(a) },
        qc: function (a) { return this.queryCommandValue(a) }, getSelectedHTML: function () { if (b.browser.msie) return this.getRange().htmlText; var a = this.getRange().cloneContents(); return b("<p/>").append(b(a)).html() }, getSelection: function () { return b.browser.msie ? this.editor.selection : this.iframe[0].contentDocument.defaultView.getSelection() }, getRange: function () { var a = this.getSelection(); return !a ? null : a.getRangeAt ? a.getRangeAt(0) : a.createRange() }, html: function (a) { if (a) this.pastHTML(a); else return toHtmlString() },
        pasteHTML: function (a) { this.iframe[0].contentWindow.focus(); var c = this.getRange(); b.browser.msie ? c.pasteHTML(a) : b.browser.mozilla ? (c.deleteContents(), c.insertNode(b(0 != a.indexOf("<") ? b("<span/>").append(a) : a)[0])) : (c.deleteContents(), c.insertNode(b(this.iframe[0].contentWindow.document.createElement("span")).append(b(0 != a.indexOf("<") ? "<span>" + a + "</span>" : a))[0])); c.collapse(!1); c.select() }, cut: function () { this.ec("cut") }, copy: function () { this.ec("copy") }, paste: function () { this.ec("paste") }, bold: function () { this.ec("bold") },
        italic: function () { this.ec("italic") }, underline: function () { this.ec("underline") }, strikeThrough: function () { this.ec("strikethrough") }, image: function (a) { b.browser.msie && !a ? this.ec("insertImage", !0) : this.ec("insertImage", !1, a || prompt("Image URL:", "http://")) }, removeFormat: function () { this.ec("removeFormat", !1, []); this.unlink() }, link: function () { b.browser.msie ? this.ec("createLink", !0) : this.ec("createLink", !1, prompt("Link URL:", "http://")) }, unlink: function () { this.ec("unlink", !1, []) }, orderedList: function () { this.ec("insertorderedlist") },
        unorderedList: function () { this.ec("insertunorderedlist") }, superscript: function () { this.ec("superscript") }, subscript: function () { this.ec("subscript") }, p: function () { this.formatBlock("<p>") }, h1: function () { this.heading(1) }, h2: function () { this.heading(2) }, h3: function () { this.heading(3) }, h4: function () { this.heading(4) }, h5: function () { this.heading(5) }, h6: function () { this.heading(6) }, heading: function (a) { this.formatBlock(b.browser.msie ? "Heading " + a : "h" + a) }, indent: function () { this.ec("indent") }, outdent: function () { this.ec("outdent") },
        insertHorizontalRule: function () { this.ec("insertHorizontalRule", !1, "ht") }, justifyLeft: function () { this.ec("justifyLeft") }, justifyCenter: function () { this.ec("justifyCenter") }, justifyRight: function () { this.ec("justifyRight") }, increaseFontSize: function () { b.browser.msie ? this.ec("fontSize", !1, this.qc("fontSize") + 1) : b.browser.safari ? this.getRange().surroundContents(b(this.iframe[0].contentWindow.document.createElement("span")).css("font-size", "larger")[0]) : this.ec("increaseFontSize", !1, "big") }, decreaseFontSize: function () {
            b.browser.msie ?
this.ec("fontSize", !1, this.qc("fontSize") - 1) : b.browser.safari ? this.getRange().surroundContents(b(this.iframe[0].contentWindow.document.createElement("span")).css("font-size", "smaller")[0]) : this.ec("decreaseFontSize", !1, "small")
        }, forecolor: function (a) { this.ec("foreColor", !1, a || prompt("Enter HTML Color:", "#")) }, formatBlock: function (a) { this.ec("formatblock", !1, a || null) }, showHTMLView: function () {
            this.updateTextArea(); this.textarea.show(); this.htmlarea.hide(); b("ul li:not(li:has(a.html))", this.toolbar).hide();
            b("ul:not(:has(:visible))", this.toolbar).hide(); b("ul li a.html", this.toolbar).addClass("highlighted")
        }, hideHTMLView: function () { this.updateHtmlArea(); this.textarea.hide(); this.htmlarea.show(); b("ul", this.toolbar).show(); b("ul li", this.toolbar).show().find("a.html").removeClass("highlighted") }, toggleHTMLView: function () { this.textarea.is(":hidden") ? this.showHTMLView() : this.hideHTMLView() }, toHtmlString: function () { return this.editor.body.innerHTML }, toString: function () { return this.editor.body.innerText },
        updateTextArea: function () { this.textarea.val(this.toHtmlString()) }, updateHtmlArea: function () { this.editor.body.innerHTML = this.textarea.val() } 
    }; d.fn.init.prototype = d.fn; d.defaultOptions = { toolbar: [["html"], "bold italic underline strikethrough | subscript superscript".split(" "), ["increasefontsize", "decreasefontsize"], ["orderedlist", "unorderedlist"], ["indent", "outdent"], ["justifyleft", "justifycenter", "justifyright"], ["link", "unlink", "image", "horizontalrule"], "p h1 h2 h3 h4 h5 h6".split(" "), ["cut", "copy",
"paste"]], css: null, toolbarText: { bold: "Bold", italic: "Italic", underline: "Underline", strikethrough: "Strike-Through", cut: "Cut", copy: "Copy", paste: "Paste", h1: "Heading 1", h2: "Heading 2", h3: "Heading 3", h4: "Heading 4", h5: "Heading 5", h6: "Heading 6", p: "Paragraph", indent: "Indent", outdent: "Outdent", horizontalrule: "Insert Horizontal Rule", justifyleft: "Left Justify", justifycenter: "Center Justify", justifyright: "Right Justify", increasefontsize: "Increase Font Size", decreasefontsize: "Decrease Font Size", forecolor: "Text Color",
    link: "Insert Link", unlink: "Remove Link", image: "Insert Image", orderedlist: "Insert Ordered List", unorderedlist: "Insert Unordered List", subscript: "Subscript", superscript: "Superscript", html: "Show/Hide HTML Source View"
}
    }; var h = { toolbarButtons: { strikethrough: "strikeThrough", orderedlist: "orderedList", unorderedlist: "unorderedList", horizontalrule: "insertHorizontalRule", justifyleft: "justifyLeft", justifycenter: "justifyCenter", justifyright: "justifyRight", increasefontsize: "increaseFontSize", decreasefontsize: "decreaseFontSize",
        html: function () { this.toggleHTMLView() } 
    }, initEditor: function (a) { var b = this.editor = this.iframe[0].contentWindow.document; b.designMode = "on"; b.open(); b.write(this.textarea.val()); b.close(); if (a.css) { var f = b.createElement("link"); f.rel = "stylesheet"; f.type = "text/css"; f.href = a.css; b.getElementsByTagName("head")[0].appendChild(f) } }, initToolBar: function (a) {
        function c(c) {
            for (var d = b("<ul/>").appendTo(f.toolbar), j = 0; j < c.length; j++) {
                var g = c[j]; if ("string" === (typeof g).toLowerCase()) if ("|" === g) d.append(b('<li class="separator"/>'));
                else { var k = function (a) { var b = h.toolbarButtons[a] || a; return "function" === (typeof b).toLowerCase() ? function (a) { b.call(this, a) } : function () { this[b](); this.editor.body.focus() } } (g.toLowerCase()), m = a.toolbarText[g.toLowerCase()]; d.append(e(g.toLowerCase(), m || g, k)) } else d.append(e(g.css, g.text, g.action))
            } 
        } var f = this, e = function (a, c, d) { return b("<li/>").append(b("<a href='javascript:void(0);'/>").addClass(a).attr("title", c).click(function () { d.call(f, b(this)) })) }; if (0 !== a.toolbar.length && h.isArray(a.toolbar[0])) for (var d =
0; d < a.toolbar.length; d++) c(a.toolbar[d]); else c(a.toolbar)
    }, attachEditorEvents: function () {
        var a = this, c = function () { a.updateHtmlArea() }; this.textarea.click(c).keyup(c).keydown(c).mousedown(c).blur(c); c = function () { a.updateTextArea() }; b(this.editor.body).click(c).keyup(c).keydown(c).mousedown(c).blur(c); b("form").submit(function () { a.toggleHTMLView(); a.toggleHTMLView() }); if (window.__doPostBack) {
            var d = __doPostBack; window.__doPostBack = function () {
                a && a.toggleHTMLView && (a.toggleHTMLView(), a.toggleHTMLView());
                return d.apply(window, arguments)
            } 
        } 
    }, isArray: function (a) { return a && "object" === typeof a && "number" === typeof a.length && "function" === typeof a.splice && !a.propertyIsEnumerable("length") } 
    }
})(jQuery);